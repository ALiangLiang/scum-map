{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","crs","Object","assign","L","CRS","Simple","projection","Projection","LonLat","transformation","Transformation","scale","zoom","Math","pow","log","LN2","distance","latlng1","latlng2","dx","lng","dy","lat","sqrt","infinite","bounds","latLngBounds","latLng","overlays","entries","markers","map","entry","markerGroupName","markerGroup","markerGroupDisplayName","name","overlayName","marker","markerIcon","icon","iconUrl","iconSize","iconAnchor","Marker","position","Popup","parse","popup","LayersControl","Overlay","LayerGroup","className","MapContainer","center","TileLayer","url","minZoom","maxZoom","noWrap","collapsed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2ozDA4FeA,MApFf,WACE,IAAMC,EAAMC,OAAOC,OAAO,GAAIC,IAAEC,IAAIC,OAAQ,CAC1CC,WAAYH,IAAEI,WAAWC,OACzBC,eAAgB,IAAIN,IAAEO,eAAe,qBAAuB,GAAI,qBAAuB,GACvFC,MAAO,SAASC,GACd,OAAOC,KAAKC,IAAI,EAAGF,IAGrBA,KAAM,SAASD,GACb,OAAOE,KAAKE,IAAIJ,GAASE,KAAKG,KAGhCC,SAAU,SAASC,EAAmBC,GACpC,IAAMC,EAAKD,EAAQE,IAAMH,EAAQG,IAC3BC,EAAKH,EAAQI,IAAML,EAAQK,IAEjC,OAAOV,KAAKW,KAAKJ,EAAKA,EAAKE,EAAKA,IAGlCG,UAAU,IAGNC,EAAyBvB,IAAEwB,aAC/BxB,IAAEyB,QAAQ,EAAG,GACbzB,IAAEyB,QAAQ,KAAS,OAGfC,EAAW5B,OAAO6B,QAAQC,GAASC,KAAI,SAACC,GAA0B,IAAD,cAC9BA,EAD8B,GAC9DC,EAD8D,KAC7CC,EAD6C,KAE/DC,EAAyBD,EAAYE,KACrCC,EAAW,sDAAkDJ,EAAlD,iCAA0FE,GAErGL,EAAUI,EAAYJ,QAAQC,KAAI,SAACO,GACvC,IAAMC,EAAaD,EAAOE,KACpBA,EAAOtC,IAAEsC,KAAK,CAClBC,QAAQ,0BAAD,OAA4BF,EAA5B,QACPG,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,MAGnB,OACE,cAACC,EAAA,EAAD,CAAQC,SAAUP,EAAOO,SAAUL,KAAMA,EAAzC,SACE,cAACM,EAAA,EAAD,UACGC,YAAMT,EAAOU,cAMtB,OACE,cAACC,EAAA,EAAcC,QAAf,CAAuBd,KAAMC,EAA7B,SACE,cAACc,EAAA,EAAD,UACGrB,SAMT,OACE,qBAAKsB,UAAU,MAAf,SACE,eAACC,EAAA,EAAD,CACED,UAAU,MACVE,OAAQ,EAAE,aAAc,eACxB3C,KAAM,EACNZ,IAAKA,EAJP,UAME,cAACwD,EAAA,EAAD,CACEC,IAAI,wBACJC,QAAS,EACTC,QAAS,EACTjC,OAAQA,EACRkC,QAAQ,IAEV,cAACV,EAAA,EAAD,CACEJ,SAAS,WACTe,WAAW,EAFb,SAIGhC,UCvEIiC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1882bebf.chunk.js","sourcesContent":["import React from 'react';\nimport L from 'leaflet';\nimport { MapContainer, TileLayer, LayersControl, LayerGroup, Marker, Popup } from 'react-leaflet'\nimport parse from 'html-react-parser'\nimport './App.css';\nimport 'leaflet/dist/leaflet.css';\nimport markers from './markers.json'\n\nfunction App() {\n  const crs = Object.assign({}, L.CRS.Simple, {\n    projection: L.Projection.LonLat,\n    transformation: new L.Transformation(0.0002133333333333333, 0, -0.0002133333333333333, 0),\n    scale: function(zoom: number) {\n      return Math.pow(2, zoom)\n    },\n\n    zoom: function(scale: number) {\n      return Math.log(scale) / Math.LN2\n    },\n\n    distance: function(latlng1: L.LatLng, latlng2: L.LatLng) {\n      const dx = latlng2.lng - latlng1.lng\n      const dy = latlng2.lat - latlng1.lat\n\n      return Math.sqrt(dx * dx + dy * dy)\n    },\n\n    infinite: true,\n  })\n\n  const bounds: L.LatLngBounds = L.latLngBounds(\n    L.latLng(-0, 0),\n    L.latLng(-1200000, 1200000)\n  )\n\n  const overlays = Object.entries(markers).map((entry: [string, any]) => {\n    const [markerGroupName, markerGroup] = entry\n    const markerGroupDisplayName = markerGroup.name\n    const overlayName = `<img src='./assets/Layercontrol%20Icons/mgi_${markerGroupName}.png' height='20' />  ${markerGroupDisplayName}`\n    \n    const markers = markerGroup.markers.map((marker: any) => {\n      const markerIcon = marker.icon\n      const icon = L.icon({\n        iconUrl: `assets/Markers%20Icons/${markerIcon}.png`,\n        iconSize: [42, 42],\n        iconAnchor: [21, 42],\n      })\n\n      return (\n        <Marker position={marker.position} icon={icon}>\n          <Popup>\n            {parse(marker.popup)}\n          </Popup>\n        </Marker>\n      )\n    })\n\n    return (\n      <LayersControl.Overlay name={overlayName}>\n        <LayerGroup>\n          {markers}\n        </LayerGroup>\n      </LayersControl.Overlay>\n    )\n  })\n\n  return (\n    <div className=\"App\">\n      <MapContainer\n        className=\"map\"\n        center={[-597949.21875, 600146.484375]}\n        zoom={2}\n        crs={crs}\n      >\n        <TileLayer\n          url=\"./map/{z}/{x}/{y}.png\"\n          minZoom={1}\n          maxZoom={5}\n          bounds={bounds}\n          noWrap={true}\n        />\n        <LayersControl\n          position=\"topright\"\n          collapsed={false}\n        >\n          {overlays}\n        </LayersControl>\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}