{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","bounds","L","latLngBounds","latLng","overlays","Object","entries","markers","map","entry","markerGroupName","markerGroup","markerGroupDisplayName","name","overlayName","marker","markerIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","Marker","position","Tooltip","className","parse","popup","LayersControl","Overlay","LayerGroup","MapContainer","center","zoom","minZoom","crs","CRS","Simple","renderer","svg","ImageOverlay","url","collapsed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"o9iCAuEeA,MA/Df,WACE,IAAMC,EAAyBC,IAAEC,aAC/BD,IAAEE,OAAO,KAAQ,KACjBF,IAAEE,QAAQ,KAAS,OAGfC,EAAWC,OAAOC,QAAQC,GAASC,KAAI,SAACC,GAA0B,IAAD,cAC9BA,EAD8B,GAC9DC,EAD8D,KAC7CC,EAD6C,KAE/DC,EAAyBD,EAAYE,KACrCC,EAAW,kDAA8CJ,EAA9C,iCAAsFE,GAEjGL,EAAUI,EAAYJ,QAAQC,KAAI,SAACO,GACvC,IAAMC,EAAaD,EAAOE,KACpBA,EAAOhB,IAAEgB,KAAK,CAClBC,QAAQ,0BAAD,OAA4BF,EAA5B,QACPG,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,EAAE,GAAI,MAGrB,OACE,cAACC,EAAA,EAAD,CAAQC,SAAUR,EAAOQ,SAAUN,KAAMA,EAAzC,SACE,cAACO,EAAA,EAAD,CAASC,UAAU,eAAnB,SACGC,YAAMX,EAAOY,cAMtB,OACE,cAACC,EAAA,EAAcC,QAAf,CAAuBhB,KAAMC,EAA7B,SACE,cAACgB,EAAA,EAAD,UACGvB,SAMT,OACE,qBAAKkB,UAAU,MAAf,SACE,eAACM,EAAA,EAAD,CACEN,UAAU,MACVO,OAAQ,CAAC,EAAG,GACZC,MAAO,GACPC,SAAU,GACVC,IAAKlC,IAAEmC,IAAIC,OACXC,SAAUrC,IAAEsC,MANd,UAQE,cAACC,EAAA,EAAD,CACEC,IAAI,gBACJzC,OAAQA,IAEV,cAAC4B,EAAA,EAAD,CACEL,SAAS,WACTmB,WAAW,EAFb,SAIGtC,UClDIuC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.daf20715.chunk.js","sourcesContent":["import React from 'react';\nimport L from 'leaflet';\nimport { MapContainer, ImageOverlay, LayersControl, LayerGroup, Marker, Tooltip } from 'react-leaflet'\nimport parse from 'html-react-parser'\nimport './App.css';\nimport 'leaflet/dist/leaflet.css';\nimport markers from './markers.json'\n\nfunction App() {\n  const bounds: L.LatLngBounds = L.latLngBounds(\n    L.latLng(620000, 900000),\n    L.latLng(-900000, -620000)\n  )\n\n  const overlays = Object.entries(markers).map((entry: [string, any]) => {\n    const [markerGroupName, markerGroup] = entry\n    const markerGroupDisplayName = markerGroup.name\n    const overlayName = `<img src='./assets/Layercontrol%20Icons/${markerGroupName}.png' height='20' />  ${markerGroupDisplayName}`\n    \n    const markers = markerGroup.markers.map((marker: any) => {\n      const markerIcon = marker.icon\n      const icon = L.icon({\n        iconUrl: `assets/Markers%20Icons/${markerIcon}.png`,\n        iconSize: [42, 42],\n        iconAnchor: [21, 42],\n        popupAnchor: [-3, -76]\n      })\n\n      return (\n        <Marker position={marker.position} icon={icon}>\n          <Tooltip className=\"globalmarker\">\n            {parse(marker.popup)}\n          </Tooltip>\n        </Marker>\n      )\n    })\n\n    return (\n      <LayersControl.Overlay name={overlayName}>\n        <LayerGroup>\n          {markers}\n        </LayerGroup>\n      </LayersControl.Overlay>\n    )\n  })\n\n  return (\n    <div className=\"App\">\n      <MapContainer\n        className=\"map\"\n        center={[0, 0]}\n        zoom={-10}\n        minZoom={-11}\n        crs={L.CRS.Simple}\n        renderer={L.svg()}\n      >\n        <ImageOverlay\n          url=\"./scummap.jpg\"\n          bounds={bounds}\n        />\n        <LayersControl\n          position=\"topright\"\n          collapsed={false}\n        >\n          {overlays}\n        </LayersControl>\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}