{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["GROUP_NAMES","localization","MARK_NAMES","App","bounds","L","latLngBounds","latLng","overlays","Object","entries","markers","map","entry","markerGroupName","markerGroup","translatedMarkerGroupName","overlayName","marker","markerIcon","icon","tooltipContent","id","tooltip","divIcon","html","renderToStaticMarkup","className","src","alt","Marker","position","Tooltip","parse","LayersControl","Overlay","name","checked","LayerGroup","ShowCoordinates","useMapEvent","e","newLat","latlng","lat","newLng","lng","popup","setLatLng","setContent","toFixed","openOn","MapContainer","center","zoom","minZoom","crs","CRS","Simple","renderer","svg","ImageOverlay","url","collapsed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wlwCAYMA,EAAyCC,EAAY,UACrDC,EAAwCD,EAAY,OAoG3CE,MAlGf,WACE,IAAMC,EAAyBC,IAAEC,aAC/BD,IAAEE,OAAO,MAAS,MAClBF,IAAEE,QAAQ,IAAQ,MAGdC,EAAWC,OAAOC,QAAQC,GAASC,KAAI,SAACC,GAA0B,IAAD,cAC9BA,EAD8B,GAC9DC,EAD8D,KAC7CC,EAD6C,KAE/DC,EAA4BhB,EAAYc,GACxCG,EAAW,kDAA8CH,EAA9C,iCAAsFE,GAEjGL,EAAUI,EAAYJ,QAAQC,KAAI,SAACM,GACvC,IAAMC,EAAaD,EAAOE,KACpBC,EAAiBnB,EAAWgB,EAAOI,KAAOJ,EAAOK,QACjDH,EAAOf,IAAEmB,QAAQ,CACrBC,KAAMC,+BACJ,sBAAKC,UAAU,eAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,qBACEC,IAAI,uFACJC,IAAI,OAGR,qBAAKF,UAAU,cAAf,SACE,qBAEEC,IAAG,8BAAyBT,EAAzB,QACHU,IAAKR,YAWf,OACE,cAACS,EAAA,EAAD,CAAQC,SAAUb,EAAOa,SAAUX,KAAMA,EAAzC,SACE,cAACY,EAAA,EAAD,CAASL,UAAU,eAAnB,SACGM,YAAMZ,UAMf,OACE,cAACa,EAAA,EAAcC,QAAf,CAAuBC,KAAMnB,EAAaoB,QAAStB,EAAYsB,QAA/D,SACE,cAACC,EAAA,EAAD,UACG3B,SAMT,SAAS4B,IACP,IAAM3B,EAAM4B,YAAY,SAAS,SAACC,GAChC,IAEMC,EAFSD,EAAEE,OAAOC,IAGlBC,GAAmB,EAFVJ,EAAEE,OAAOG,IAGxBzC,IAAE0C,QACDC,UAAUP,EAAEE,QACZM,WAAW,uFAAsDR,EAAEE,OACpE,yEAAuDE,EAAS,IAAMH,EAAS,UAAYD,EAAEE,OAAOC,IAAM,WAAaH,EAAEE,OAAOG,IAChI,yFAAkED,EAAOK,QAAQ,GAAK,IAAMR,EAAOQ,QAAQ,GAAK,aAC/GC,OAAOvC,MAEV,OAAO,KAGT,OACE,qBAAKe,UAAU,MAAf,SACE,eAACyB,EAAA,EAAD,CACEzB,UAAU,MACV0B,OAAQ,CAAC,EAAG,GACZC,MAAO,GACPC,SAAU,GACVC,IAAKnD,IAAEoD,IAAIC,OACXC,SAAUtD,IAAEuD,MANd,UAQE,cAACrB,EAAD,IACA,cAACsB,EAAA,EAAD,CACEC,IAAI,gBACJ1D,OAAQA,IAEV,cAAC8B,EAAA,EAAD,CACEH,SAAS,WACTgC,WAAW,EAFb,SAIGvD,UC5FIwD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f09457f7.chunk.js","sourcesContent":["/// <reference path=\"../types/react-leaflet-div-icon.d.ts\"/> \n\nimport React from 'react';\nimport { renderToStaticMarkup } from \"react-dom/server\"\nimport L from 'leaflet';\nimport { MapContainer, useMapEvent, ImageOverlay, LayersControl, LayerGroup, Marker, Tooltip } from 'react-leaflet'\nimport parse from 'html-react-parser'\nimport './App.css';\nimport 'leaflet/dist/leaflet.css';\nimport markers from './markers.json'\nimport localization from './localizations/zh_tw.json'\n\nconst GROUP_NAMES: {[index: string]: string} = localization['groupName']\nconst MARK_NAMES: {[index: string]: string} = localization['marker']\n\nfunction App() {\n  const bounds: L.LatLngBounds = L.latLngBounds(\n    L.latLng(620000, -620000),\n    L.latLng(-900000, 900000)\n  )\n\n  const overlays = Object.entries(markers).map((entry: [string, any]) => {\n    const [markerGroupName, markerGroup] = entry\n    const translatedMarkerGroupName = GROUP_NAMES[markerGroupName]\n    const overlayName = `<img src='./assets/Layercontrol%20Icons/${markerGroupName}.png' height='20' />  ${translatedMarkerGroupName}`\n    \n    const markers = markerGroup.markers.map((marker: {position: [number, number], icon: string, id: string, tooltip: string}) => {\n      const markerIcon = marker.icon\n      const tooltipContent = MARK_NAMES[marker.id] || marker.tooltip\n      const icon = L.divIcon({\n        html: renderToStaticMarkup(\n          <div className=\"marker-stack\">\n            <div className=\"marker-pointer\">\n              <img\n                src=\"https://icons-for-free.com/iconfiles/png/512/map+marker+icon-1320166582858325800.png\"\n                alt=\"\"\n              />\n            </div>\n            <div className=\"marker-icon\">\n              <img\n                // src={`assets/Markers%20Icons/${markerIcon}.png`}\n                src={`assets/marker_icons/${markerIcon}.svg`}\n                alt={tooltipContent}\n              />\n            </div>\n          </div>\n        ),\n        // iconUrl: `assets/marker_icons/${markerIcon}.svg`,\n        // iconSize: [42, 42],\n        // iconAnchor: [21, 42],\n        // popupAnchor: [-3, -76]\n      })\n\n      return (\n        <Marker position={marker.position} icon={icon}>\n          <Tooltip className=\"globalmarker\">\n            {parse(tooltipContent)}\n          </Tooltip>\n        </Marker>\n      )\n    })\n\n    return (\n      <LayersControl.Overlay name={overlayName} checked={markerGroup.checked}>\n        <LayerGroup>\n          {markers}\n        </LayerGroup>\n      </LayersControl.Overlay>\n    )\n  })\n\n  function ShowCoordinates() {\n    const map = useMapEvent('click', (e) => {\n      const oldLat = e.latlng.lat\n      const oldLng = e.latlng.lng\n      const newLat = oldLat\n      const newLng = oldLng * -1\n      L.popup()\n      .setLatLng(e.latlng)\n      .setContent(\"<b>座標：</b><br>-地圖上：<br><text style=color:#0062ff>\" + e.latlng +\n      \"</text><br><br>-遊戲中：<br><text style=color:#0062ff>\" + newLng + \" \" + newLat + \" test: \" + e.latlng.lat + \" test: \" + -e.latlng.lng +\n      \"</text><br><br>-傳送指令：<br><text style=color:#ff2a00>#teleport \" + newLng.toFixed(8) + \" \" + newLat.toFixed(8) + \" 0</text>\")\n      .openOn(map);\n    })\n    return null\n  }\n\n  return (\n    <div className=\"App\">\n      <MapContainer\n        className=\"map\"\n        center={[0, 0]}\n        zoom={-10}\n        minZoom={-11}\n        crs={L.CRS.Simple}\n        renderer={L.svg()}\n      >\n        <ShowCoordinates />\n        <ImageOverlay\n          url=\"./scummap.jpg\"\n          bounds={bounds}\n        />\n        <LayersControl\n          position=\"topright\"\n          collapsed={false}\n        >\n          {overlays}\n        </LayersControl>\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}